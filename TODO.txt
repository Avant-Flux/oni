TODO: Use static_cast<>() instead of C-style casting for dealing with opaque types
	If possible.  They may be at C-level, where that function does not exist.
TODO: Clean up OgreInterface.h GameApplication.h function callback declaration
	Should only be declared in one way, in one place
TODO: Use define guards in C headers
TODO: Find out why key IDs fall outside of the expected range (much larger)
TODO: Consider increasing scale of all objects if shadows are scale-dependent
	Currently, shadows are very pixelated
TODO: Move as much of window setup as possible into BaseApplication.setup() and not go()

TODO: Default Agent to face down Y Axis, not X-Axis

TODO: Consider - Functions which accept vectors should accept three numbers where possible, rather than an array.  That way, the unpacking happens in plain sight.  Also, you can easily unbox with splat, but it's not necessary to force items into an array just for a parameter.

TODO: Optimize - Consider making C++-level things use char* instead of std::string, so that no conversion has to be done
	Conversion is pretty pointless, considering one of the main objectives of this engine is to get away from C++ as much as possible, in favor of Ruby and C.
	Conversion happens a lot in Oni::Animation, and may be a source of optimization in the future.

TODO: Rename Init_Oni_AnimationEasing to perhaps Init_Oni_Animation_Easing or Init_Oni_Animation_Ease for symmetry with it's ruby class name, and other similar C functions.

TODO: Windows - make sure windows builds with Zip support

====MAKE IT SO GEMS CAN BE BUILT
NOTE: Currently supporting only Ubuntu Linux and Windows with mingw ruby (ruby-installer version)

TODO: Allow for cross-compiling of Windows gems
TODO: Pass correct cmake parameters when compiling for Windows
TODO: Warn when attempting to build gem natively on Windows
TODO: Make all include paths in CMakeLists based on paths that apply to all users


TODO: Create setViewport() getViewport() in BaseApplication
	need to grab viewpoint pointer to pass between different cameras, for camera switching

TODO: Create programmable scene manager and programmable camera
	Allows for changes in the way the scene manager is structured to be handled the ruby level
	same goes for the camera
	Wouldn't be super efficient, but would allow for rapid prototyping / livecoding
	
	Should probably just manage lifetime of objects at the Ruby level

TODO: Create Oni::Movable, because there is way to much code overlap between Node, Model and Light
	Perhaps not necessarily call it Movable, because it's purpose differs from that of Ogre::Movable, but look into creating this thing regardless
	
	This might not help at all, because there's still going to be a bunch of overlap at the C-extension level
		Should be able to help with that too, if pointers are being cast correctly
		Can just use cpp interface calls for Movable
	
	The base class might actually be Node, because of how the other objects are moved around by being attached to nodes

TODO: Actually pass proper transform space to Ogre::Node in translate method for Light and Model instead of having to switch between three different function calls.

TODO: Create null/empty object.  Useful for grouping meshes together. Really useful when prototyping.


TODO: Consider - Angles should all be in one unit (radians or degrees)

TODO: Create classes to generate basic primitives like lines, etc for use when debugging, or simply visualizing data programatically

TODO: Allow setting of parent node after initialization of the object


TODO: Allow control over light groups for even better control over lighting
